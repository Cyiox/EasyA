{
  "version": 3,
  "sources": [
    "/Users/tkhan/Algorand/EasyA/Airplanes/projects/plane-contracts/smart_contracts/hello_world/contract.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAuCA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;AAAA;;AAyDG;;AAAA;AAAA;AAAA;;AAAA;AAzDH;;;AAAA;AAAA;;AAyDG;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA/BA;;AAAA;AAAA;AAAA;;AAAA;AA1BH;;;AAAA;AA0BG;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AApBE;;AAAA;AAAA;AAAA;;AAAA;AANL;;;AAAA;;;AAAA;;;AAAA;AAAA;;;AAAA;AAMK;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AANL;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAMI;;;AAoCkB;AAEH;;AAAA;AAA6B;AAA7B;;AAAA;AAA6B;AAA7B;;AAAA;;AAAA;AAAgC;AAAhC;;AAAA;AAAgC;AAAhC;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAIK;;AACA;;;;;AAFN;;;;;;;AAFA;;;;;;;;;;;AAHI;;;;AAQT;;;AARS;;;AA7BP;AAAA;AAAA;;;AAAA;;AAAA;AACI;;AAAA;AAEE;;AAAA;AACC;;AAAA;AALK;;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAT8C;AAAA;;AAAA;AAkBrE;AAAA;;AAAA;AAAA;AAEA;AAGF;;;AAES;;AAAA;AAzB8D;AAAA;AAAA;AAyB/B;AAAA;AAAA;;AAAtC;AAC+C;AAAA;AAC/C;AA2BF;;;AAEY;;AAAA;;AAAA;AAAZ",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 32"
    },
    "6": {
      "op": "bytecblock 0x151f7c75 \"properties\""
    },
    "24": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "26": {
      "op": "bz main_bare_routing@8",
      "stack_out": []
    },
    "29": {
      "op": "pushbytess 0x541bc477 0xf8b9f76e 0xda172a08 // method \"createAirplaneListing(string,uint64,uint64)uint64\", method \"getListing(uint64)(string,uint64,uint64,uint64,uint64)\", method \"getAlgoBalance(account)uint64\"",
      "defined_out": [
        "Method(createAirplaneListing(string,uint64,uint64)uint64)",
        "Method(getAlgoBalance(account)uint64)",
        "Method(getListing(uint64)(string,uint64,uint64,uint64,uint64))"
      ],
      "stack_out": [
        "Method(createAirplaneListing(string,uint64,uint64)uint64)",
        "Method(getListing(uint64)(string,uint64,uint64,uint64,uint64))",
        "Method(getAlgoBalance(account)uint64)"
      ]
    },
    "46": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(createAirplaneListing(string,uint64,uint64)uint64)",
        "Method(getAlgoBalance(account)uint64)",
        "Method(getListing(uint64)(string,uint64,uint64,uint64,uint64))",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(createAirplaneListing(string,uint64,uint64)uint64)",
        "Method(getListing(uint64)(string,uint64,uint64,uint64,uint64))",
        "Method(getAlgoBalance(account)uint64)",
        "tmp%2#0"
      ]
    },
    "49": {
      "op": "match main_createAirplaneListing_route@3 main_getListing_route@4 main_getAlgoBalance_route@5",
      "stack_out": []
    },
    "57": {
      "block": "main_after_if_else@12",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "58": {
      "op": "return",
      "stack_out": []
    },
    "59": {
      "block": "main_getAlgoBalance_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "61": {
      "op": "!",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "62": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "63": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "65": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "66": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%0#0"
      ]
    },
    "69": {
      "op": "btoi",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "70": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "72": {
      "callsub": "smart_contracts/hello_world/contract.algo.ts::FractionalPlaneOwnership.getAlgoBalance",
      "op": "callsub getAlgoBalance",
      "defined_out": [
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0"
      ]
    },
    "75": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0"
      ]
    },
    "76": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0",
        "0x151f7c75"
      ]
    },
    "77": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ]
    },
    "78": {
      "op": "concat",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "79": {
      "op": "log",
      "stack_out": []
    },
    "80": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "81": {
      "op": "return",
      "stack_out": []
    },
    "82": {
      "block": "main_getListing_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "84": {
      "op": "!",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "85": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "86": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "88": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "89": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%2#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%2#0"
      ]
    },
    "92": {
      "op": "btoi",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "93": {
      "callsub": "smart_contracts/hello_world/contract.algo.ts::FractionalPlaneOwnership.getListing",
      "op": "callsub getListing",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "96": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "0x151f7c75"
      ]
    },
    "97": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%17#0"
      ]
    },
    "98": {
      "op": "concat",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "99": {
      "op": "log",
      "stack_out": []
    },
    "100": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "101": {
      "op": "return",
      "stack_out": []
    },
    "102": {
      "block": "main_createAirplaneListing_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "104": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "105": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "106": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "108": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "109": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "112": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "115": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%0#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "118": {
      "op": "btoi",
      "defined_out": [
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "119": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[8]%1#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0",
        "reinterpret_bytes[8]%1#0"
      ]
    },
    "122": {
      "op": "btoi",
      "defined_out": [
        "tmp%10#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "123": {
      "callsub": "smart_contracts/hello_world/contract.algo.ts::FractionalPlaneOwnership.createAirplaneListing",
      "op": "callsub createAirplaneListing",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "126": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "127": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "128": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ]
    },
    "129": {
      "op": "concat",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "130": {
      "op": "log",
      "stack_out": []
    },
    "131": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "132": {
      "op": "return",
      "stack_out": []
    },
    "133": {
      "block": "main_bare_routing@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "135": {
      "op": "bnz main_after_if_else@12",
      "stack_out": []
    },
    "138": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "140": {
      "op": "!",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "141": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "142": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "143": {
      "op": "return",
      "stack_out": []
    },
    "144": {
      "subroutine": "smart_contracts/hello_world/contract.algo.ts::FractionalPlaneOwnership.createAirplaneListing",
      "params": {
        "planeAddress#0": "bytes",
        "shares#0": "uint64",
        "pricePerShare#0": "uint64"
      },
      "block": "createAirplaneListing",
      "stack_in": [],
      "op": "proto 3 1"
    },
    "147": {
      "op": "itxn_begin"
    },
    "148": {
      "op": "frame_dig -3",
      "defined_out": [
        "planeAddress#0 (copy)"
      ],
      "stack_out": [
        "planeAddress#0 (copy)"
      ]
    },
    "150": {
      "op": "len",
      "defined_out": [
        "length%0#1"
      ],
      "stack_out": [
        "length%0#1"
      ]
    },
    "151": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "length%0#1"
      ],
      "stack_out": [
        "length%0#1",
        "0"
      ]
    },
    "152": {
      "op": "dig 1",
      "defined_out": [
        "0",
        "length%0#1",
        "length%0#1 (copy)"
      ],
      "stack_out": [
        "length%0#1",
        "0",
        "length%0#1 (copy)"
      ]
    },
    "154": {
      "op": ">=",
      "defined_out": [
        "is_out_of_bounds%0#0",
        "length%0#1"
      ],
      "stack_out": [
        "length%0#1",
        "is_out_of_bounds%0#0"
      ]
    },
    "155": {
      "op": "intc_0 // 0",
      "stack_out": [
        "length%0#1",
        "is_out_of_bounds%0#0",
        "0"
      ]
    },
    "156": {
      "op": "dig 2",
      "stack_out": [
        "length%0#1",
        "is_out_of_bounds%0#0",
        "0",
        "length%0#1 (copy)"
      ]
    },
    "158": {
      "op": "uncover 2",
      "stack_out": [
        "length%0#1",
        "0",
        "length%0#1 (copy)",
        "is_out_of_bounds%0#0"
      ]
    },
    "160": {
      "op": "select",
      "defined_out": [
        "bounded_index%0#0",
        "length%0#1"
      ],
      "stack_out": [
        "length%0#1",
        "bounded_index%0#0"
      ]
    },
    "161": {
      "op": "intc_2 // 32",
      "defined_out": [
        "32",
        "bounded_index%0#0",
        "length%0#1"
      ],
      "stack_out": [
        "length%0#1",
        "bounded_index%0#0",
        "32"
      ]
    },
    "162": {
      "op": "dig 2",
      "stack_out": [
        "length%0#1",
        "bounded_index%0#0",
        "32",
        "length%0#1 (copy)"
      ]
    },
    "164": {
      "op": ">=",
      "defined_out": [
        "bounded_index%0#0",
        "is_out_of_bounds%1#0",
        "length%0#1"
      ],
      "stack_out": [
        "length%0#1",
        "bounded_index%0#0",
        "is_out_of_bounds%1#0"
      ]
    },
    "165": {
      "op": "intc_2 // 32",
      "stack_out": [
        "length%0#1",
        "bounded_index%0#0",
        "is_out_of_bounds%1#0",
        "32"
      ]
    },
    "166": {
      "op": "dig 3",
      "stack_out": [
        "length%0#1",
        "bounded_index%0#0",
        "is_out_of_bounds%1#0",
        "32",
        "length%0#1 (copy)"
      ]
    },
    "168": {
      "op": "uncover 2",
      "stack_out": [
        "length%0#1",
        "bounded_index%0#0",
        "32",
        "length%0#1 (copy)",
        "is_out_of_bounds%1#0"
      ]
    },
    "170": {
      "op": "select",
      "defined_out": [
        "bounded_index%0#0",
        "bounded_index%1#0",
        "length%0#1"
      ],
      "stack_out": [
        "length%0#1",
        "bounded_index%0#0",
        "bounded_index%1#0"
      ]
    },
    "171": {
      "op": "frame_dig -3",
      "stack_out": [
        "length%0#1",
        "bounded_index%0#0",
        "bounded_index%1#0",
        "planeAddress#0 (copy)"
      ]
    },
    "173": {
      "op": "cover 2",
      "stack_out": [
        "length%0#1",
        "planeAddress#0 (copy)",
        "bounded_index%0#0",
        "bounded_index%1#0"
      ]
    },
    "175": {
      "op": "substring3",
      "defined_out": [
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0",
        "length%0#1"
      ],
      "stack_out": [
        "length%0#1",
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0"
      ]
    },
    "176": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0",
        "length%0#1"
      ],
      "stack_out": [
        "length%0#1",
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0"
      ]
    },
    "178": {
      "op": "dup",
      "defined_out": [
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetReserve_idx_0#0",
        "length%0#1"
      ],
      "stack_out": [
        "length%0#1",
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetReserve_idx_0#0"
      ]
    },
    "179": {
      "op": "itxn_field ConfigAssetReserve",
      "stack_out": [
        "length%0#1",
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0"
      ]
    },
    "181": {
      "op": "itxn_field ConfigAssetManager",
      "stack_out": [
        "length%0#1",
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0"
      ]
    },
    "183": {
      "op": "intc_0 // 0",
      "stack_out": [
        "length%0#1",
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0",
        "0"
      ]
    },
    "184": {
      "op": "itxn_field ConfigAssetDecimals",
      "stack_out": [
        "length%0#1",
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0"
      ]
    },
    "186": {
      "op": "frame_dig -2",
      "defined_out": [
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0",
        "length%0#1",
        "shares#0 (copy)"
      ],
      "stack_out": [
        "length%0#1",
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0",
        "shares#0 (copy)"
      ]
    },
    "188": {
      "op": "itxn_field ConfigAssetTotal",
      "stack_out": [
        "length%0#1",
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0"
      ]
    },
    "190": {
      "op": "pushbytes \"PLANE\"",
      "defined_out": [
        "\"PLANE\"",
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0",
        "length%0#1"
      ],
      "stack_out": [
        "length%0#1",
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0",
        "\"PLANE\""
      ]
    },
    "197": {
      "op": "itxn_field ConfigAssetUnitName",
      "stack_out": [
        "length%0#1",
        "inner_txn_params%0%%param_ConfigAssetName_idx_0#0"
      ]
    },
    "199": {
      "op": "itxn_field ConfigAssetName",
      "stack_out": [
        "length%0#1"
      ]
    },
    "201": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "length%0#1"
      ],
      "stack_out": [
        "length%0#1",
        "3"
      ]
    },
    "203": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "length%0#1"
      ]
    },
    "205": {
      "op": "intc_0 // 0",
      "stack_out": [
        "length%0#1",
        "0"
      ]
    },
    "206": {
      "op": "itxn_field Fee",
      "stack_out": [
        "length%0#1"
      ]
    },
    "208": {
      "op": "itxn_submit"
    },
    "209": {
      "op": "itxn CreatedAssetID",
      "defined_out": [
        "length%0#1",
        "txnResult.CreatedAssetID#0"
      ],
      "stack_out": [
        "length%0#1",
        "txnResult.CreatedAssetID#0"
      ]
    },
    "211": {
      "op": "swap",
      "stack_out": [
        "txnResult.CreatedAssetID#0",
        "length%0#1"
      ]
    },
    "212": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "txnResult.CreatedAssetID#0"
      ],
      "stack_out": [
        "txnResult.CreatedAssetID#0",
        "as_bytes%0#0"
      ]
    },
    "213": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%0#0",
        "txnResult.CreatedAssetID#0"
      ],
      "stack_out": [
        "txnResult.CreatedAssetID#0",
        "length_uint16%0#0"
      ]
    },
    "216": {
      "op": "frame_dig -3",
      "stack_out": [
        "txnResult.CreatedAssetID#0",
        "length_uint16%0#0",
        "planeAddress#0 (copy)"
      ]
    },
    "218": {
      "op": "concat",
      "defined_out": [
        "encoded_value%0#0",
        "txnResult.CreatedAssetID#0"
      ],
      "stack_out": [
        "txnResult.CreatedAssetID#0",
        "encoded_value%0#0"
      ]
    },
    "219": {
      "op": "frame_dig -2",
      "stack_out": [
        "txnResult.CreatedAssetID#0",
        "encoded_value%0#0",
        "shares#0 (copy)"
      ]
    },
    "221": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0",
        "txnResult.CreatedAssetID#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "txnResult.CreatedAssetID#0",
        "encoded_value%0#0",
        "val_as_bytes%4#0"
      ]
    },
    "222": {
      "op": "frame_dig -1",
      "defined_out": [
        "encoded_value%0#0",
        "pricePerShare#0 (copy)",
        "txnResult.CreatedAssetID#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "txnResult.CreatedAssetID#0",
        "encoded_value%0#0",
        "val_as_bytes%4#0",
        "pricePerShare#0 (copy)"
      ]
    },
    "224": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0",
        "txnResult.CreatedAssetID#0",
        "val_as_bytes%14#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "txnResult.CreatedAssetID#0",
        "encoded_value%0#0",
        "val_as_bytes%4#0",
        "val_as_bytes%14#0"
      ]
    },
    "225": {
      "op": "dig 3",
      "defined_out": [
        "encoded_value%0#0",
        "txnResult.CreatedAssetID#0",
        "txnResult.CreatedAssetID#0 (copy)",
        "val_as_bytes%14#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "txnResult.CreatedAssetID#0",
        "encoded_value%0#0",
        "val_as_bytes%4#0",
        "val_as_bytes%14#0",
        "txnResult.CreatedAssetID#0 (copy)"
      ]
    },
    "227": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0",
        "txnResult.CreatedAssetID#0",
        "val_as_bytes%14#0",
        "val_as_bytes%19#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "txnResult.CreatedAssetID#0",
        "encoded_value%0#0",
        "val_as_bytes%4#0",
        "val_as_bytes%14#0",
        "val_as_bytes%19#0"
      ]
    },
    "228": {
      "op": "pushbytes 0x0022",
      "defined_out": [
        "0x0022",
        "encoded_value%0#0",
        "txnResult.CreatedAssetID#0",
        "val_as_bytes%14#0",
        "val_as_bytes%19#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "txnResult.CreatedAssetID#0",
        "encoded_value%0#0",
        "val_as_bytes%4#0",
        "val_as_bytes%14#0",
        "val_as_bytes%19#0",
        "0x0022"
      ]
    },
    "232": {
      "op": "dig 3",
      "defined_out": [
        "0x0022",
        "encoded_value%0#0",
        "txnResult.CreatedAssetID#0",
        "val_as_bytes%14#0",
        "val_as_bytes%19#0",
        "val_as_bytes%4#0",
        "val_as_bytes%4#0 (copy)"
      ],
      "stack_out": [
        "txnResult.CreatedAssetID#0",
        "encoded_value%0#0",
        "val_as_bytes%4#0",
        "val_as_bytes%14#0",
        "val_as_bytes%19#0",
        "0x0022",
        "val_as_bytes%4#0 (copy)"
      ]
    },
    "234": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0",
        "txnResult.CreatedAssetID#0",
        "val_as_bytes%14#0",
        "val_as_bytes%19#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "txnResult.CreatedAssetID#0",
        "encoded_value%0#0",
        "val_as_bytes%4#0",
        "val_as_bytes%14#0",
        "val_as_bytes%19#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "235": {
      "op": "uncover 3",
      "stack_out": [
        "txnResult.CreatedAssetID#0",
        "encoded_value%0#0",
        "val_as_bytes%14#0",
        "val_as_bytes%19#0",
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%4#0"
      ]
    },
    "237": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "encoded_value%0#0",
        "txnResult.CreatedAssetID#0",
        "val_as_bytes%14#0",
        "val_as_bytes%19#0"
      ],
      "stack_out": [
        "txnResult.CreatedAssetID#0",
        "encoded_value%0#0",
        "val_as_bytes%14#0",
        "val_as_bytes%19#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "238": {
      "op": "uncover 2",
      "stack_out": [
        "txnResult.CreatedAssetID#0",
        "encoded_value%0#0",
        "val_as_bytes%19#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%14#0"
      ]
    },
    "240": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "encoded_value%0#0",
        "txnResult.CreatedAssetID#0",
        "val_as_bytes%19#0"
      ],
      "stack_out": [
        "txnResult.CreatedAssetID#0",
        "encoded_value%0#0",
        "val_as_bytes%19#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "241": {
      "op": "dig 1",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "encoded_value%0#0",
        "txnResult.CreatedAssetID#0",
        "val_as_bytes%19#0",
        "val_as_bytes%19#0 (copy)"
      ],
      "stack_out": [
        "txnResult.CreatedAssetID#0",
        "encoded_value%0#0",
        "val_as_bytes%19#0",
        "encoded_tuple_buffer%4#0",
        "val_as_bytes%19#0 (copy)"
      ]
    },
    "243": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%5#0",
        "encoded_value%0#0",
        "txnResult.CreatedAssetID#0",
        "val_as_bytes%19#0"
      ],
      "stack_out": [
        "txnResult.CreatedAssetID#0",
        "encoded_value%0#0",
        "val_as_bytes%19#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "244": {
      "op": "uncover 2",
      "stack_out": [
        "txnResult.CreatedAssetID#0",
        "val_as_bytes%19#0",
        "encoded_tuple_buffer%5#0",
        "encoded_value%0#0"
      ]
    },
    "246": {
      "op": "concat",
      "defined_out": [
        "propertyStruct#0",
        "txnResult.CreatedAssetID#0",
        "val_as_bytes%19#0"
      ],
      "stack_out": [
        "txnResult.CreatedAssetID#0",
        "val_as_bytes%19#0",
        "propertyStruct#0"
      ]
    },
    "247": {
      "op": "bytec_1 // \"properties\"",
      "defined_out": [
        "\"properties\"",
        "propertyStruct#0",
        "txnResult.CreatedAssetID#0",
        "val_as_bytes%19#0"
      ],
      "stack_out": [
        "txnResult.CreatedAssetID#0",
        "val_as_bytes%19#0",
        "propertyStruct#0",
        "\"properties\""
      ]
    },
    "248": {
      "op": "uncover 2",
      "stack_out": [
        "txnResult.CreatedAssetID#0",
        "propertyStruct#0",
        "\"properties\"",
        "val_as_bytes%19#0"
      ]
    },
    "250": {
      "op": "concat",
      "defined_out": [
        "propertyStruct#0",
        "tmp%1#0",
        "txnResult.CreatedAssetID#0"
      ],
      "stack_out": [
        "txnResult.CreatedAssetID#0",
        "propertyStruct#0",
        "tmp%1#0"
      ]
    },
    "251": {
      "op": "dup",
      "defined_out": [
        "propertyStruct#0",
        "tmp%1#0",
        "tmp%1#0 (copy)",
        "txnResult.CreatedAssetID#0"
      ],
      "stack_out": [
        "txnResult.CreatedAssetID#0",
        "propertyStruct#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "252": {
      "op": "box_del",
      "defined_out": [
        "propertyStruct#0",
        "tmp%1#0",
        "txnResult.CreatedAssetID#0",
        "{box_del}"
      ],
      "stack_out": [
        "txnResult.CreatedAssetID#0",
        "propertyStruct#0",
        "tmp%1#0",
        "{box_del}"
      ]
    },
    "253": {
      "op": "pop",
      "stack_out": [
        "txnResult.CreatedAssetID#0",
        "propertyStruct#0",
        "tmp%1#0"
      ]
    },
    "254": {
      "op": "swap",
      "stack_out": [
        "txnResult.CreatedAssetID#0",
        "tmp%1#0",
        "propertyStruct#0"
      ]
    },
    "255": {
      "op": "box_put",
      "stack_out": [
        "txnResult.CreatedAssetID#0"
      ]
    },
    "256": {
      "retsub": true,
      "op": "retsub"
    },
    "257": {
      "subroutine": "smart_contracts/hello_world/contract.algo.ts::FractionalPlaneOwnership.getListing",
      "params": {
        "assetId#0": "uint64"
      },
      "block": "getListing",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "260": {
      "op": "frame_dig -1",
      "defined_out": [
        "assetId#0 (copy)"
      ],
      "stack_out": [
        "assetId#0 (copy)"
      ]
    },
    "262": {
      "op": "itob",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "263": {
      "op": "bytec_1 // \"properties\"",
      "defined_out": [
        "\"properties\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "\"properties\""
      ]
    },
    "264": {
      "op": "swap",
      "stack_out": [
        "\"properties\"",
        "tmp%0#0"
      ]
    },
    "265": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "266": {
      "op": "dup",
      "defined_out": [
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "267": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "268": {
      "op": "bury 1",
      "stack_out": [
        "tmp%1#0",
        "maybe_exists%0#0"
      ]
    },
    "270": {
      "error": "listing not found",
      "op": "assert // listing not found",
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "271": {
      "op": "box_get",
      "defined_out": [
        "listing#0",
        "maybe_exists%1#0"
      ],
      "stack_out": [
        "listing#0",
        "maybe_exists%1#0"
      ]
    },
    "272": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "listing#0"
      ]
    },
    "273": {
      "retsub": true,
      "op": "retsub"
    },
    "274": {
      "subroutine": "smart_contracts/hello_world/contract.algo.ts::FractionalPlaneOwnership.getAlgoBalance",
      "params": {
        "user#0": "bytes"
      },
      "block": "getAlgoBalance",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "277": {
      "op": "frame_dig -1",
      "defined_out": [
        "user#0 (copy)"
      ],
      "stack_out": [
        "user#0 (copy)"
      ]
    },
    "279": {
      "op": "acct_params_get AcctBalance",
      "defined_out": [
        "check%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "check%0#0"
      ]
    },
    "281": {
      "error": "account funded",
      "op": "assert // account funded",
      "stack_out": [
        "value%0#0"
      ]
    },
    "282": {
      "retsub": true,
      "op": "retsub"
    }
  }
}