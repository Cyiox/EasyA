/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"FractionalPlaneOwnership","structs":{"AirplainShare":[{"name":"address","type":"string"},{"name":"totalShares","type":"uint64"},{"name":"availableShares","type":"uint64"},{"name":"pricePerShare","type":"uint64"},{"name":"privatePlaneId","type":"uint64"}]},"methods":[{"name":"createAirplaneListing","args":[{"type":"string","name":"planeAddress"},{"type":"uint64","name":"shares"},{"type":"uint64","name":"pricePerShare"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"getListing","args":[{"type":"uint64","name":"assetId"}],"returns":{"type":"(string,uint64,uint64,uint64,uint64)","struct":"AirplainShare"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}},{"name":"getAlgoBalance","args":[{"type":"account","name":"user"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":0,"bytes":0},"local":{"ints":0,"bytes":0}},"keys":{"global":{},"local":{},"box":{"listedProperties":{"keyType":"AVMString","valueType":"AirplainShare","key":"cHJvcGVydGllcw=="}}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":["NoOp"],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[272],"errorMessage":"Box must have value"},{"pc":[62,85,105],"errorMessage":"OnCompletion is not NoOp"},{"pc":[281],"errorMessage":"account funded"},{"pc":[141],"errorMessage":"can only call when creating"},{"pc":[65,88,108],"errorMessage":"can only call when not creating"},{"pc":[270],"errorMessage":"listing not found"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="},"byteCode":{"approval":"CiADAAEgJgIEFR98dQpwcm9wZXJ0aWVzMRtBAGiCAwRUG8R3BPi5924E2hcqCDYaAI4DAC0AGQACIkMxGRREMRhENhoBF8AciADHFihMULAjQzEZFEQxGEQ2GgEXiAChKExQsCNDMRkURDEYRDYaAVcCADYaAhc2GgMXiAASFihMULAjQzEZQP+vMRgURCNDigMBsYv9FSJLAQ8iSwJPAk0kSwIPJEsDTwJNi/1OAlIyCkmyKrIpIrIji/6yIoAFUExBTkWyJbImgQOyECKyAbO0PEwWVwYCi/1Qi/4Wi/8WSwMWgAIAIksDUE8DUE8CUEsBUE8CUClPAlBJvEhMv4mKAQGL/xYpTFBJvUUBRL5EiYoBAYv/cwBEiQ==","clear":"CoEBQw=="},"compilerInfo":{"compiler":"puya","compilerVersion":{"major":4,"minor":4,"patch":4}},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


// Type definitions for ARC-56 structs

export type AirplainShare = {
  address: string,
  totalShares: bigint,
  availableShares: bigint,
  pricePerShare: bigint,
  privatePlaneId: bigint
}


/**
 * Converts the ABI tuple representation of a AirplainShare to the struct representation
 */
export function AirplainShareFromTuple(abiTuple: [string, bigint, bigint, bigint, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.AirplainShare, APP_SPEC.structs) as AirplainShare
}

/**
 * The argument types for the FractionalPlaneOwnership contract
 */
export type FractionalPlaneOwnershipArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createAirplaneListing(string,uint64,uint64)uint64': {
      planeAddress: string
      shares: bigint | number
      pricePerShare: bigint | number
    }
    'getListing(uint64)(string,uint64,uint64,uint64,uint64)': {
      assetId: bigint | number
    }
    'getAlgoBalance(account)uint64': {
      user: Uint8Array | string
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createAirplaneListing(string,uint64,uint64)uint64': [planeAddress: string, shares: bigint | number, pricePerShare: bigint | number]
    'getListing(uint64)(string,uint64,uint64,uint64,uint64)': [assetId: bigint | number]
    'getAlgoBalance(account)uint64': [user: Uint8Array | string]
  }
}

/**
 * The return type for each method
 */
export type FractionalPlaneOwnershipReturns = {
  'createAirplaneListing(string,uint64,uint64)uint64': bigint
  'getListing(uint64)(string,uint64,uint64,uint64,uint64)': AirplainShare
  'getAlgoBalance(account)uint64': bigint
}

/**
 * Defines the types of available calls and state of the FractionalPlaneOwnership smart contract.
 */
export type FractionalPlaneOwnershipTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createAirplaneListing(string,uint64,uint64)uint64' | 'createAirplaneListing', {
      argsObj: FractionalPlaneOwnershipArgs['obj']['createAirplaneListing(string,uint64,uint64)uint64']
      argsTuple: FractionalPlaneOwnershipArgs['tuple']['createAirplaneListing(string,uint64,uint64)uint64']
      returns: FractionalPlaneOwnershipReturns['createAirplaneListing(string,uint64,uint64)uint64']
    }>
    & Record<'getListing(uint64)(string,uint64,uint64,uint64,uint64)' | 'getListing', {
      argsObj: FractionalPlaneOwnershipArgs['obj']['getListing(uint64)(string,uint64,uint64,uint64,uint64)']
      argsTuple: FractionalPlaneOwnershipArgs['tuple']['getListing(uint64)(string,uint64,uint64,uint64,uint64)']
      returns: FractionalPlaneOwnershipReturns['getListing(uint64)(string,uint64,uint64,uint64,uint64)']
    }>
    & Record<'getAlgoBalance(account)uint64' | 'getAlgoBalance', {
      argsObj: FractionalPlaneOwnershipArgs['obj']['getAlgoBalance(account)uint64']
      argsTuple: FractionalPlaneOwnershipArgs['tuple']['getAlgoBalance(account)uint64']
      returns: FractionalPlaneOwnershipReturns['getAlgoBalance(account)uint64']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    box: {
      keys: {
        listedProperties: AirplainShare
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type FractionalPlaneOwnershipSignatures = keyof FractionalPlaneOwnershipTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type FractionalPlaneOwnershipNonVoidMethodSignatures = keyof FractionalPlaneOwnershipTypes['methods'] extends infer T ? T extends keyof FractionalPlaneOwnershipTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the FractionalPlaneOwnership smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends FractionalPlaneOwnershipSignatures> = FractionalPlaneOwnershipTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the FractionalPlaneOwnership smart contract to the method's return type
 */
export type MethodReturn<TSignature extends FractionalPlaneOwnershipSignatures> = FractionalPlaneOwnershipTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = FractionalPlaneOwnershipTypes['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type FractionalPlaneOwnershipCreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type FractionalPlaneOwnershipDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: FractionalPlaneOwnershipCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the FractionalPlaneOwnership smart contract
 */
export abstract class FractionalPlaneOwnershipParamsFactory {
  /**
   * Constructs a no op call for the createAirplaneListing(string,uint64,uint64)uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static createAirplaneListing(params: CallParams<FractionalPlaneOwnershipArgs['obj']['createAirplaneListing(string,uint64,uint64)uint64'] | FractionalPlaneOwnershipArgs['tuple']['createAirplaneListing(string,uint64,uint64)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'createAirplaneListing(string,uint64,uint64)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.planeAddress, params.args.shares, params.args.pricePerShare],
    }
  }
  /**
   * Constructs a no op call for the getListing(uint64)(string,uint64,uint64,uint64,uint64) ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getListing(params: CallParams<FractionalPlaneOwnershipArgs['obj']['getListing(uint64)(string,uint64,uint64,uint64,uint64)'] | FractionalPlaneOwnershipArgs['tuple']['getListing(uint64)(string,uint64,uint64,uint64,uint64)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getListing(uint64)(string,uint64,uint64,uint64,uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.assetId],
    }
  }
  /**
   * Constructs a no op call for the getAlgoBalance(account)uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getAlgoBalance(params: CallParams<FractionalPlaneOwnershipArgs['obj']['getAlgoBalance(account)uint64'] | FractionalPlaneOwnershipArgs['tuple']['getAlgoBalance(account)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getAlgoBalance(account)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.user],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the FractionalPlaneOwnership smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class FractionalPlaneOwnershipFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `FractionalPlaneOwnershipFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new FractionalPlaneOwnershipClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new FractionalPlaneOwnershipClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the FractionalPlaneOwnership smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: FractionalPlaneOwnershipDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new FractionalPlaneOwnershipClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the FractionalPlaneOwnership smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the FractionalPlaneOwnership smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the FractionalPlaneOwnership smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new FractionalPlaneOwnershipClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the FractionalPlaneOwnership smart contract
 */
export class FractionalPlaneOwnershipClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `FractionalPlaneOwnershipClient`
   *
   * @param appClient An `AppClient` instance which has been created with the FractionalPlaneOwnership app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `FractionalPlaneOwnershipClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends FractionalPlaneOwnershipNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `FractionalPlaneOwnershipClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<FractionalPlaneOwnershipClient> {
    return new FractionalPlaneOwnershipClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `FractionalPlaneOwnershipClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<FractionalPlaneOwnershipClient> {
    return new FractionalPlaneOwnershipClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the FractionalPlaneOwnership smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the FractionalPlaneOwnership smart contract using the `createAirplaneListing(string,uint64,uint64)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    createAirplaneListing: (params: CallParams<FractionalPlaneOwnershipArgs['obj']['createAirplaneListing(string,uint64,uint64)uint64'] | FractionalPlaneOwnershipArgs['tuple']['createAirplaneListing(string,uint64,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(FractionalPlaneOwnershipParamsFactory.createAirplaneListing(params))
    },

    /**
     * Makes a call to the FractionalPlaneOwnership smart contract using the `getListing(uint64)(string,uint64,uint64,uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getListing: (params: CallParams<FractionalPlaneOwnershipArgs['obj']['getListing(uint64)(string,uint64,uint64,uint64,uint64)'] | FractionalPlaneOwnershipArgs['tuple']['getListing(uint64)(string,uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(FractionalPlaneOwnershipParamsFactory.getListing(params))
    },

    /**
     * Makes a call to the FractionalPlaneOwnership smart contract using the `getAlgoBalance(account)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getAlgoBalance: (params: CallParams<FractionalPlaneOwnershipArgs['obj']['getAlgoBalance(account)uint64'] | FractionalPlaneOwnershipArgs['tuple']['getAlgoBalance(account)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(FractionalPlaneOwnershipParamsFactory.getAlgoBalance(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the FractionalPlaneOwnership smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the FractionalPlaneOwnership smart contract using the `createAirplaneListing(string,uint64,uint64)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    createAirplaneListing: (params: CallParams<FractionalPlaneOwnershipArgs['obj']['createAirplaneListing(string,uint64,uint64)uint64'] | FractionalPlaneOwnershipArgs['tuple']['createAirplaneListing(string,uint64,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(FractionalPlaneOwnershipParamsFactory.createAirplaneListing(params))
    },

    /**
     * Makes a call to the FractionalPlaneOwnership smart contract using the `getListing(uint64)(string,uint64,uint64,uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getListing: (params: CallParams<FractionalPlaneOwnershipArgs['obj']['getListing(uint64)(string,uint64,uint64,uint64,uint64)'] | FractionalPlaneOwnershipArgs['tuple']['getListing(uint64)(string,uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(FractionalPlaneOwnershipParamsFactory.getListing(params))
    },

    /**
     * Makes a call to the FractionalPlaneOwnership smart contract using the `getAlgoBalance(account)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getAlgoBalance: (params: CallParams<FractionalPlaneOwnershipArgs['obj']['getAlgoBalance(account)uint64'] | FractionalPlaneOwnershipArgs['tuple']['getAlgoBalance(account)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(FractionalPlaneOwnershipParamsFactory.getAlgoBalance(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the FractionalPlaneOwnership smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the FractionalPlaneOwnership smart contract using the `createAirplaneListing(string,uint64,uint64)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    createAirplaneListing: async (params: CallParams<FractionalPlaneOwnershipArgs['obj']['createAirplaneListing(string,uint64,uint64)uint64'] | FractionalPlaneOwnershipArgs['tuple']['createAirplaneListing(string,uint64,uint64)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(FractionalPlaneOwnershipParamsFactory.createAirplaneListing(params))
      return {...result, return: result.return as unknown as (undefined | FractionalPlaneOwnershipReturns['createAirplaneListing(string,uint64,uint64)uint64'])}
    },

    /**
     * Makes a call to the FractionalPlaneOwnership smart contract using the `getListing(uint64)(string,uint64,uint64,uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getListing: async (params: CallParams<FractionalPlaneOwnershipArgs['obj']['getListing(uint64)(string,uint64,uint64,uint64,uint64)'] | FractionalPlaneOwnershipArgs['tuple']['getListing(uint64)(string,uint64,uint64,uint64,uint64)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(FractionalPlaneOwnershipParamsFactory.getListing(params))
      return {...result, return: result.return as unknown as (undefined | FractionalPlaneOwnershipReturns['getListing(uint64)(string,uint64,uint64,uint64,uint64)'])}
    },

    /**
     * Makes a call to the FractionalPlaneOwnership smart contract using the `getAlgoBalance(account)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getAlgoBalance: async (params: CallParams<FractionalPlaneOwnershipArgs['obj']['getAlgoBalance(account)uint64'] | FractionalPlaneOwnershipArgs['tuple']['getAlgoBalance(account)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(FractionalPlaneOwnershipParamsFactory.getAlgoBalance(params))
      return {...result, return: result.return as unknown as (undefined | FractionalPlaneOwnershipReturns['getAlgoBalance(account)uint64'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new FractionalPlaneOwnershipClient(this.appClient.clone(params))
  }

  /**
   * Makes a readonly (simulated) call to the FractionalPlaneOwnership smart contract using the `getListing(uint64)(string,uint64,uint64,uint64,uint64)` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getListing(params: CallParams<FractionalPlaneOwnershipArgs['obj']['getListing(uint64)(string,uint64,uint64,uint64,uint64)'] | FractionalPlaneOwnershipArgs['tuple']['getListing(uint64)(string,uint64,uint64,uint64,uint64)']>) {
    const result = await this.appClient.send.call(FractionalPlaneOwnershipParamsFactory.getListing(params))
    return result.return as unknown as FractionalPlaneOwnershipReturns['getListing(uint64)(string,uint64,uint64,uint64,uint64)']
  }

  /**
   * Makes a readonly (simulated) call to the FractionalPlaneOwnership smart contract using the `getAlgoBalance(account)uint64` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getAlgoBalance(params: CallParams<FractionalPlaneOwnershipArgs['obj']['getAlgoBalance(account)uint64'] | FractionalPlaneOwnershipArgs['tuple']['getAlgoBalance(account)uint64']>) {
    const result = await this.appClient.send.call(FractionalPlaneOwnershipParamsFactory.getAlgoBalance(params))
    return result.return as unknown as FractionalPlaneOwnershipReturns['getAlgoBalance(account)uint64']
  }

  /**
   * Methods to access state for the current FractionalPlaneOwnership app
   */
  state = {
    /**
     * Methods to access box state for the current FractionalPlaneOwnership app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
          listedProperties: result.listedProperties,
        }
      },
      /**
       * Get the current value of the listedProperties key in box state
       */
      listedProperties: async (): Promise<AirplainShare | undefined> => { return (await this.appClient.state.box.getValue("listedProperties")) as AirplainShare | undefined },
    },
  }

  public newGroup(): FractionalPlaneOwnershipComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a createAirplaneListing(string,uint64,uint64)uint64 method call against the FractionalPlaneOwnership contract
       */
      createAirplaneListing(params: CallParams<FractionalPlaneOwnershipArgs['obj']['createAirplaneListing(string,uint64,uint64)uint64'] | FractionalPlaneOwnershipArgs['tuple']['createAirplaneListing(string,uint64,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.createAirplaneListing(params)))
        resultMappers.push((v) => client.decodeReturnValue('createAirplaneListing(string,uint64,uint64)uint64', v))
        return this
      },
      /**
       * Add a getListing(uint64)(string,uint64,uint64,uint64,uint64) method call against the FractionalPlaneOwnership contract
       */
      getListing(params: CallParams<FractionalPlaneOwnershipArgs['obj']['getListing(uint64)(string,uint64,uint64,uint64,uint64)'] | FractionalPlaneOwnershipArgs['tuple']['getListing(uint64)(string,uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getListing(params)))
        resultMappers.push((v) => client.decodeReturnValue('getListing(uint64)(string,uint64,uint64,uint64,uint64)', v))
        return this
      },
      /**
       * Add a getAlgoBalance(account)uint64 method call against the FractionalPlaneOwnership contract
       */
      getAlgoBalance(params: CallParams<FractionalPlaneOwnershipArgs['obj']['getAlgoBalance(account)uint64'] | FractionalPlaneOwnershipArgs['tuple']['getAlgoBalance(account)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getAlgoBalance(params)))
        resultMappers.push((v) => client.decodeReturnValue('getAlgoBalance(account)uint64', v))
        return this
      },
      /**
       * Add a clear state call to the FractionalPlaneOwnership contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as FractionalPlaneOwnershipComposer
  }
}
export type FractionalPlaneOwnershipComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the createAirplaneListing(string,uint64,uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createAirplaneListing(params?: CallParams<FractionalPlaneOwnershipArgs['obj']['createAirplaneListing(string,uint64,uint64)uint64'] | FractionalPlaneOwnershipArgs['tuple']['createAirplaneListing(string,uint64,uint64)uint64']>): FractionalPlaneOwnershipComposer<[...TReturns, FractionalPlaneOwnershipReturns['createAirplaneListing(string,uint64,uint64)uint64'] | undefined]>

  /**
   * Calls the getListing(uint64)(string,uint64,uint64,uint64,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getListing(params?: CallParams<FractionalPlaneOwnershipArgs['obj']['getListing(uint64)(string,uint64,uint64,uint64,uint64)'] | FractionalPlaneOwnershipArgs['tuple']['getListing(uint64)(string,uint64,uint64,uint64,uint64)']>): FractionalPlaneOwnershipComposer<[...TReturns, FractionalPlaneOwnershipReturns['getListing(uint64)(string,uint64,uint64,uint64,uint64)'] | undefined]>

  /**
   * Calls the getAlgoBalance(account)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getAlgoBalance(params?: CallParams<FractionalPlaneOwnershipArgs['obj']['getAlgoBalance(account)uint64'] | FractionalPlaneOwnershipArgs['tuple']['getAlgoBalance(account)uint64']>): FractionalPlaneOwnershipComposer<[...TReturns, FractionalPlaneOwnershipReturns['getAlgoBalance(account)uint64'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the FractionalPlaneOwnership smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): FractionalPlaneOwnershipComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): FractionalPlaneOwnershipComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<FractionalPlaneOwnershipComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<FractionalPlaneOwnershipComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<FractionalPlaneOwnershipComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<FractionalPlaneOwnershipComposerResults<TReturns>>
}
export type FractionalPlaneOwnershipComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

